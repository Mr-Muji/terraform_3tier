name: 테라폼 인프라 배포

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      run_module_00:
        description: '00-prerequisites 모듈 실행'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      run_module_01:
        description: '01-base-infra 모듈 실행'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      run_module_02:
        description: '02-database 모듈 실행'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      run_module_03:
        description: '03-compute 모듈 실행'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      run_module_04:
        description: '04-cicd-apps 모듈 실행'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  # AWS 인증 관련
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ap-northeast-2
  
  # 테라폼 관련 설정
  TERRAFORM_VERSION: "1.11.2"
  TF_CLI_ARGS: "-no-color"
  
  # 모듈 디렉토리 관리
  DIR_00_PREREQUISITES: "./00-prerequisites"
  DIR_01_BASE_INFRA: "./01-base-infra"
  DIR_02_DATABASE: "./02-database"
  DIR_03_COMPUTE: "./03-compute"
  DIR_04_CICD_APPS: "./04-cicd-apps"

jobs:
  terraform-00-prerequisites:
    name: 00-사전요구사항 배포
    runs-on: ubuntu-latest
    if: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.run_module_00 == 'true') || (github.event_name != 'workflow_dispatch' && false) }}
    defaults:
      run:
        working-directory: ./00-prerequisites
    steps:
      - name: 소스코드 체크아웃
        uses: actions/checkout@v3

      - name: Terraform 설정
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform 초기화
        id: init
        run: terraform init

      - name: Terraform 계획
        id: plan
        run: terraform plan -out=tfplan

      - name: Terraform 적용
        id: apply
        run: terraform apply -auto-approve tfplan

      - name: 실패 시 인프라 삭제
        if: ${{ failure() }}
        run: terraform destroy -auto-approve

  terraform-01-base-infra:
    name: 01-기본인프라 배포
    needs: [terraform-00-prerequisites]
    runs-on: ubuntu-latest
    if: ${{ always() && ((github.event_name == 'workflow_dispatch' && github.event.inputs.run_module_01 == 'true') || (github.event_name != 'workflow_dispatch' && true)) }}
    defaults:
      run:
        working-directory: ./01-base-infra
    steps:
      - name: 소스코드 체크아웃
        uses: actions/checkout@v3

      - name: Terraform 설정
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform 초기화
        id: init
        run: terraform init

      - name: Terraform 계획
        id: plan
        run: terraform plan -out=tfplan

      - name: Terraform 적용
        id: apply
        run: terraform apply -auto-approve tfplan

      - name: 실패 시 인프라 삭제
        if: ${{ failure() }}
        run: |
          terraform destroy -auto-approve
          if [ "${{ github.event.inputs.run_module_00 }}" = "true" ]; then
            cd ${{ env.DIR_00_PREREQUISITES }}
            terraform destroy -auto-approve
          fi

  terraform-02-database:
    name: 02-데이터베이스 배포
    needs: [terraform-01-base-infra]
    runs-on: ubuntu-latest
    if: ${{ always() && ((github.event_name == 'workflow_dispatch' && github.event.inputs.run_module_02 == 'true') || (github.event_name != 'workflow_dispatch' && false)) }}
    defaults:
      run:
        working-directory: ./02-database
    steps:
      - name: 소스코드 체크아웃
        uses: actions/checkout@v3

      - name: Terraform 설정
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform 초기화
        id: init
        run: terraform init

      - name: Terraform 계획
        id: plan
        run: terraform plan -out=tfplan

      - name: Terraform 적용
        id: apply
        run: terraform apply -auto-approve tfplan

      - name: 실패 시 인프라 삭제
        if: ${{ failure() }}
        run: |
          terraform destroy -auto-approve
          if [ "${{ github.event.inputs.run_module_01 }}" = "true" ]; then
            cd ${{ env.DIR_01_BASE_INFRA }}
            terraform destroy -auto-approve
          fi
          if [ "${{ github.event.inputs.run_module_00 }}" = "true" ]; then
            cd ${{ env.DIR_00_PREREQUISITES }}
            terraform destroy -auto-approve
          fi

  terraform-03-compute:
    name: 03-컴퓨팅 배포
    needs: [terraform-02-database]
    runs-on: ubuntu-latest
    if: ${{ always() && ((github.event_name == 'workflow_dispatch' && github.event.inputs.run_module_03 == 'true') || (github.event_name != 'workflow_dispatch' && true)) }}
    defaults:
      run:
        working-directory: ./03-compute
    steps:
      - name: 소스코드 체크아웃
        uses: actions/checkout@v3

      - name: Terraform 설정
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform 초기화
        id: init
        run: terraform init

      - name: Terraform 계획
        id: plan
        run: terraform plan -out=tfplan

      - name: Terraform 적용
        id: apply
        run: terraform apply -auto-approve tfplan

      - name: 실패 시 인프라 삭제
        if: ${{ failure() }}
        run: |
          terraform destroy -auto-approve
          if [ "${{ github.event.inputs.run_module_02 }}" = "true" ]; then
            cd ${{ env.DIR_02_DATABASE }}
            terraform destroy -auto-approve
          fi
          if [ "${{ github.event.inputs.run_module_01 }}" = "true" ]; then
            cd ${{ env.DIR_01_BASE_INFRA }}
            terraform destroy -auto-approve
          fi
          if [ "${{ github.event.inputs.run_module_00 }}" = "true" ]; then
            cd ${{ env.DIR_00_PREREQUISITES }}
            terraform destroy -auto-approve
          fi

  terraform-04-cicd-apps:
    name: 04-CICD앱 배포
    needs: [terraform-03-compute]
    runs-on: ubuntu-latest
    if: ${{ always() && ((github.event_name == 'workflow_dispatch' && github.event.inputs.run_module_04 == 'true') || (github.event_name != 'workflow_dispatch' && true)) }}
    defaults:
      run:
        working-directory: ./04-cicd-apps
    steps:
      - name: 소스코드 체크아웃
        uses: actions/checkout@v3

      - name: Terraform 설정
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform 초기화
        id: init
        run: terraform init

      - name: Terraform 계획
        id: plan
        run: terraform plan -out=tfplan

      - name: Terraform 적용
        id: apply
        run: terraform apply -auto-approve tfplan

      - name: 실패 시 인프라 삭제
        if: ${{ failure() }}
        run: |
          terraform destroy -auto-approve
          if [ "${{ github.event.inputs.run_module_03 }}" = "true" ]; then
            cd ${{ env.DIR_03_COMPUTE }}
            terraform destroy -auto-approve
          fi
          if [ "${{ github.event.inputs.run_module_02 }}" = "true" ]; then
            cd ${{ env.DIR_02_DATABASE }}
            terraform destroy -auto-approve
          fi
          if [ "${{ github.event.inputs.run_module_01 }}" = "true" ]; then
            cd ${{ env.DIR_01_BASE_INFRA }}
            terraform destroy -auto-approve
          fi
          if [ "${{ github.event.inputs.run_module_00 }}" = "true" ]; then
            cd ${{ env.DIR_00_PREREQUISITES }}
            terraform destroy -auto-approve
          fi
